" ----------
" NeoBundles
" ----------

" NeoBundle loads first
if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'


" ----------
" The bundles
" ----------

" OS process interaction
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

" Moving even faster in vim
NeoBundle 'Lokaltog/vim-easymotion'

" Project file tree
NeoBundle 'scrooloose/nerdtree'

" A single nerdtree
NeoBundle 'jistr/vim-nerdtree-tabs'

" Essential utilities like search
NeoBundle 'Shougo/unite.vim'

" Deal with comments
NeoBundle 'scrooloose/nerdcommenter'

" Tab in vim
NeoBundle 'gcmt/taboo.vim'

" Tabular alignment
NeoBundle 'godlygeek/tabular'

" The snippet engine
NeoBundle 'sirver/ultisnips'
" The snippets themselves
NeoBundle 'honza/vim-snippets'

" Git support
NeoBundle 'tpope/vim-fugitive'

" Completion engine
NeoBundle 'Shougo/neocomplcache.vim'

" The most-in-one Haskell bundle
NeoBundle 'dag/vim2hs'

" Web tech beautification: HTML, CSS, and of course JS
NeoBundle 'maksimr/vim-jsbeautify'
" Other language support
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'wavded/vim-stylus'
NeoBundle 'elzr/vim-json'
NeoBundle 'lambdatoast/elm.vim'
NeoBundle 'leafgarland/typescript-vim'

" Ctags
NeoBundle 'majutsushi/tagbar'
NeoBundle 'bitc/lushtags'

" EditorConfig
NeoBundle 'editorconfig/editorconfig-vim'

" Search with ag
NeoBundle 'rking/ag.vim'

" Extradite for git log
NeoBundle 'int3/vim-extradite'

" Autoformatting
NeoBundle 'Chiel92/vim-autoformat'


" ----------
" Basic setup
" ----------

" Required for NeoBundle
filetype plugin indent on

" NeoBundle installation check
NeoBundleCheck

" Compatibility hacks
set shell=/bin/bash
set nocompatible
set shellslash

" Highlighting
syntax enable
set number
set ruler

" Use relative line numbering
set nonumber
set relativenumber
set rnu

" Indentation
set nosmartindent
set autoindent

" No auto-wrapping
set wrap
" Wrapping needs to be enforced on every buffer.
autocmd BufRead * :set textwidth=0

" Use spaces, not tabs
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Backspace
set backspace=indent,eol,start

" Status bar
set laststatus=2

" Yank to clipboard
set clipboard=unnamed

" Always show tab bar
set showtabline=2

" Leader
let mapleader=' '

" Clean vim on-screen artifacts on write
au BufWritePost * :silent! :syntax sync fromstart<cr>:redraw!<cr>

" Fold
set foldmethod=syntax
set foldlevelstart=99

" No highlight
nmap <Leader>p :noh<CR>

" Switch case
nmap ` ~

" Command
map ' :

" Marks
noremap M m
noremap m `

" Repeat last command
nmap <Leader>r .

" Reselect visual block after indent/outdent
vmap < <gv
vmap > >gv

" Normally Y copies the whole row - not from cursor to EOL like other
" capitals. Make Y behave like other capitals
map Y y$

" Save
nmap <Leader>w :w
" Save and quit
nmap <Leader>q :q
" Remove buffer
nmap <Leader>x :bd
" Remove ALL buffers
nmap <Leader>X :bd *<C-A>
" Reload current file
nmap <Leader>e :e

" New file
nmap <Leader>v :vert new<CR>
nmap <Leader>b :new<CR>

" Clean trailing space
nmap <Leader>c :%s/<Space>\+$//<CR>

" Split screen, horizontall and vertically
nmap <Leader>i <C-w>v
nmap <Leader>o <C-w>s

" Move among splits in normal mode
nmap <Leader>h <C-W>h
nmap <Leader>l <C-W>l
nmap <Leader>k <C-W>k
nmap <Leader>j <C-W>j

" Move to next split
nmap <Leader>n <C-W>w
nmap <Leader>m <C-W>W

" Indentation in visual mode
vmap <Leader>h <gv
vmap <Leader>l >gv

" Shortcuts for scrolling
nmap K <C-u>
nmap J <C-d>

" Commenting
vmap <Leader>k <Leader>clgv
vmap <Leader>j <Leader>cugv

" Max out the height of the current split
nmap <Leader>t <C-W>_
" Max out the width of the current split
nmap <Leader>y <C-W>\|
" Normalize all split sizes, which is very handy when resizing terminal
nmap <Leader>u <C-W>=

" Enable yank history
let g:unite_source_history_yank_enable = 1

" Disable folding in Markdown
let g:vim_markdown_folding_disabled=1

" Redo
map r <C-r>

" git with fugitive
nmap <Leader>' :Gstatus<CR>
nmap <Leader>; :Gcommit<CR>
nmap <Leader>` :Gdiff<CR>

" git log with extradite
nmap <Leader>! :Extradite<CR>

" Vertical diffing!
set diffopt+=vertical

" Folding
nmap <Leader>Z za
nmap <Leader>z zA

" Sort
vmap <Leader>s :sort<CR>
vmap <Leader>su :sort u<CR>

" Start code ompletion engine
let g:neocomplcache_enable_at_startup = 1

" Solarized
hi Visual cterm=NONE ctermbg=0 ctermfg=NONE guibg=Grey40

" Count characters and lines
function! VisualCount() range
    let n = @n
    silent! normal gv"ny
    echo "" . system("echo '" . @n . "' | wc")
    let @n = n
    " bonus: restores the visual selection
    normal! gv
endfunction
nnoremap <Leader>c :w<Space>!wc<CR>
vnoremap <Leader>c :call<Space>VisualCount()<CR>

" Formatting Haskell headers
command FormatHaskell :exe 'silent! %!stylish-haskell'

" TypeScript highlighting needs setting up
autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript


" ----------
" Manipulating files and the OS
" ----------

" Activation shortcut
nmap <Leader>g :NERDTreeTabsToggle<CR>
" Close NERDTree on file opened
let NERDTreeQuitOnOpen=1
" No fancy arrows
let g:NERDTreeDirArrows=0

" Search by file/buffer name
nmap <Leader>d :Unite<Space>file_rec/async<CR>
" Search directory content
nmap <Leader>s :Ag<Space>
" Select buffer
nmap <Leader>a :Unite<Space>-quick-match<Space>buffer<CR>

" Always search in project root with ag.
let g:ag_working_path_mode='r'


" ----------
" Web stack
" ----------

nnoremap <Leader><Leader>js :call JsBeautify()<CR>
nnoremap <Leader><Leader>html :call HtmlBeautify()<CR>
nnoremap <Leader><Leader>css :call CSSBeautify()<CR>

vnoremap <Leader><Leader>js :call RangeJsBeautify()<CR>
vnoremap <Leader><Leader>html :call RangeHtmlBeautify()<CR>
vnoremap <Leader><Leader>css :call RangeCSSBeautify()<CR>


" ----------
" Tabs
" ----------

" Taboo
let g:taboo_tab_format='  %N  '
let g:taboo_renamed_tab_format='  %N %f  '

" Shortcuts
nmap <Leader>= :tabnew<CR>
nmap <Leader>[ :tabp<CR>
nmap <Leader>] :tabn<CR>
nmap <Leader>1 1gt
nmap <Leader>2 2gt
nmap <Leader>3 3gt
nmap <Leader>4 4gt
nmap <Leader>5 5gt
nmap <Leader>6 6gt
nmap <Leader>7 7gt
nmap <Leader>8 8gt
nmap <Leader>9 9gt
nmap <Leader>0 10gt

nnoremap <Leader><Leader>hex :%!xxd<CR>
nnoremap <Leader><Leader>text :%!xxd -r<CR>


" ----------
" Ctags
" ----------

" Tagbar
nmap <leader>\ :TagbarToggle<CR>
let g:tagbar_autofocus = 1


" ----------
" Snippets
" ----------

let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'


" ----------
" Haskell
" ----------

" Do not substitute characters, ever
let g:haskell_conceal_wide = 0
let g:haskell_conceal = 0
let g:haskell_conceal_enumerations = 0

" Haddock documentation setup
let g:haddock_browser = 'open'
let g:haddock_browser_callformat = '%s %s'


" ----------
" Elm
" ----------

" Make sure `.elm` files are parsed.
au BufNewFile,BufRead *.elm set filetype=elm


" ----------
" Base-64
" ----------

nnoremap <Leader><Leader>64 c<C-R>=system('base64 --decode', @")<CR><Esc>
vnoremap <Leader><Leader>64 c<C-R>=system('base64 --decode', @")<CR><Esc>


" ----------
" EasyMotion
" ----------

" Case-sensitive
let g:EasyMotion_smartcase = 1

" In-file find
nmap <Leader>f /
omap <Leader>f /

" hjkl-specific motions
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
" keep cursor colum when JK motion
let g:EasyMotion_startofline = 0


" ----------
" Alignments
" ----------

nmap <Leader>/ :Tabularize /
vmap <Leader>/ :Tabularize /

" Generic Haskell delimiters:
"   <-  ->  (  )  {  }  =  ,  ::
nmap <Leader>/hg :Tabularize /\(<-\\|->\\|(\\|)\\|{\\|}\\|=\\|,\\|::\)<CR>
vmap <Leader>/hg :Tabularize /\(<-\\|->\\|(\\|)\\|{\\|}\\|=\\|,\\|::\)<CR>

" Haskell records delimiters:
"   {  }  ,  ::  =
nmap <Leader>/hr :Tabularize /\({\\|}\\|,\\|::\\|=\)<CR>
vmap <Leader>/hr :Tabularize /\({\\|}\\|,\\|::\\|=\)<CR>

" Haskell alignments delimiters:
"   <-  ->  =
nmap <Leader>/ha :Tabularize /\(<-\\|->\\|=\)<CR>
vmap <Leader>/ha :Tabularize /\(<-\\|->\\|=\)<CR>

" Cabal delimiters:
"   :[ ]
nmap <Leader>/c :Tabularize /\(:\zs\\|,\)<CR>
vmap <Leader>/c :Tabularize /\(:\zs\\|,\)<CR>

" Generic JavaScript delimiters:
"   :  =  ,
nmap <Leader>/j :Tabularize /\(:\\|=\\|,\)<CR>
vmap <Leader>/j :Tabularize /\(:\\|=\\|,\)<CR>

call neobundle#end()

" ----------
" Useful commands
" ----------

command REVERSELINES :g/^/m0<CR>
command JSON :%!python -m json.tool
command XML :%!xmllint --format --recover - 2>/dev/null
