" ----------
" NeoBundles
" ----------

" NeoBundle loads first
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'


" ----------
" The bundles
" ----------

" OS process interaction
NeoBundle 'Shougo/vimproc'
" Moving even faster in vim
NeoBundle 'Lokaltog/vim-easymotion'
" Project file tree
NeoBundle 'scrooloose/nerdtree'
" A single nerdtree
NeoBundle 'jistr/vim-nerdtree-tabs'
" Essential utilities like search
NeoBundle 'Shougo/unite.vim'
" Deal with comments
NeoBundle 'scrooloose/nerdcommenter'
" Tab in vim
NeoBundle 'gcmt/taboo.vim'
" Tabular alignment
NeoBundle "godlygeek/tabular"
" The snippet engine
NeoBundle "sirver/ultisnips"
" The snippets themselves
NeoBundle "honza/vim-snippets"
" Git
NeoBundle 'tpope/vim-fugitive'
" Web tech beautification: HTML, CSS, and of course JS
NeoBundle 'maksimr/vim-jsbeautify'
" The most-in-one Haskell bundle
NeoBundle 'dag/vim2hs'
" GHC integration
NeoBundle 'eagletmt/ghcmod-vim'
" Other language support
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'wavded/vim-stylus'
NeoBundle 'elzr/vim-json'

" TODO: restore
"NeoBundle 'majutsushi/tagbar'
"NeoBundle 'scrooloose/syntastic'
"NeoBundle 'eagletmt/neco-ghc'


" ----------
" Basic setup
" ----------

" Required for NeoBundle
filetype plugin indent on

" NeoBundle installation check
NeoBundleCheck

" Compatibility hacks
set shell=/bin/bash
set nocompatible

" Highlighting
syntax enable
set number
set ruler

" Use relative line numbering
set nonumber
set relativenumber
set rnu

" Indentation
set nosmartindent
set autoindent

" No hard wrap
set wrap
set tw=0
set fo=cq
set wm=0

" Use spaces, not tabs
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Backspace
set backspace=indent,eol,start

" Status bar
set laststatus=2

" Yank to clipboard
set clipboard=unnamed

" Always show tab bar
set showtabline=2

" Leader
let mapleader=" "

" Clean VIM artifacts on write
au BufWritePost * :silent! :syntax sync fromstart<cr>:redraw!<cr>

" Fold
set foldmethod=syntax

" No highlight
nmap <Leader>p :noh<CR>

" Switch case
nmap ` ~

" Command
map ' :

" Repeat last command
nmap <Leader>r .

" Reselect visual block after indent/outdent
vmap < <gv
vmap > >gv

" Normally Y copies the whole row - not from cursor to EOL like other
" capitals. Make Y behave like other capitals
map Y y$

" Save
nmap <Leader>w :w
" Save and quit
nmap <Leader>q :q
" Remove buffer
nmap <Leader>x :bd
" Remove ALL buffers
nmap <Leader>X :bd *<C-A>
" Reload current file
nmap <Leader>e :e

" New file
nmap <Leader>v :vert new<CR>
nmap <Leader>b :new<CR>

" Clean trailing space
nmap <Leader>c :%s/<Space>\+$//<CR>

" Split screen, horizontall and vertically
nmap <Leader>i <C-w>v
nmap <Leader>o <C-w>s

" Move among splits in normal mode
nmap <Leader>h <C-W>h
nmap <Leader>l <C-W>l
nmap <Leader>k <C-W>k
nmap <Leader>j <C-W>j

" Move to next split
nmap <Leader>n <C-W>w
nmap <Leader>m <C-W>W

" Indentation in visual mode
vmap <Leader>h <gv
vmap <Leader>l >gv

" Shortcuts for scrolling
nmap K <C-u>
nmap J <C-d>

" Commenting
vmap <Leader>k <Leader>clgv
vmap <Leader>j <Leader>cugv

" Max out the height of the current split
nmap <Leader>t <C-W>_
" Max out the width of the current split
nmap <Leader>y <C-W>\|
" Normalize all split sizes, which is very handy when resizing terminal
nmap <Leader>u <C-W>=

" Enable yank history
let g:unite_source_history_yank_enable = 1

" Disable folding in Markdown
let g:vim_markdown_folding_disabled=1

" Redo
map r <C-r>

" Use sane (i.e. normal) regexes
map <Leader>f /\v

" Search previous
nmap m N

" git with fugitive
nmap <Leader>' :Gstatus<CR>
nmap <Leader>; :Gcommit<CR>
nmap <Leader>` :Gdiff<CR>

" Folding
nmap <Leader>Z za
nmap <Leader>z zA

" Sort
vmap <Leader>s :sort<CR>
vmap <Leader>su :sort u<CR>


" ----------
" Manipulating files and the OS
" ----------

" Activation shortcut
nmap <Leader>g :NERDTreeTabsToggle<CR>
" Close NERDTree on file opened
let NERDTreeQuitOnOpen = 1

" Search by file/buffer name
nmap <Leader>d :Unite<Space>file_rec/async<CR>
" Search directory content
nmap <Leader>s :Unite<Space>grep:.<CR>
" Select buffer
nmap <Leader>a :Unite<Space>-quick-match<Space>buffer<CR>

" Ignore `.gitignore` files
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
let g:unite_source_grep_recursive_opt = ''



" ----------
" Web tech
" ----------

command! JSON %!python -m json.tool

nnoremap <Leader><Space>js :call JsBeautify()<cr>
nnoremap <Leader><Space>html :call HtmlBeautify()<cr>
nnoremap <Leader><Space>css :call CSSBeautify()<cr>

vnoremap <Leader><Space>js :call RangeJsBeautify()<cr>
vnoremap <Leader><Space>html :call RangeHtmlBeautify()<cr>
vnoremap <Leader><Space>css :call RangeCSSBeautify()<cr>


" ----------
" Tabs
" ----------

" Taboo
let g:taboo_tab_format='  %N  '
let g:taboo_renamed_tab_format='  %N %f  '

" Show tab guides
set lcs=tab:\⁞\
set list listchars=tab:\ \ ,trail:·

" Shortcuts
nmap <Leader>= :tabnew<CR>
nmap <Leader>[ :tabp<CR>
nmap <Leader>] :tabn<CR>
nmap <Leader>1 1gt
nmap <Leader>2 2gt
nmap <Leader>3 3gt
nmap <Leader>4 4gt
nmap <Leader>5 5gt
nmap <Leader>6 6gt
nmap <Leader>7 7gt
nmap <Leader>8 8gt
nmap <Leader>9 9gt
nmap <Leader>0 10gt


" ----------
" Alignments
" ----------

nmap <Leader>/ :Tabularize /
vmap <Leader>/ :Tabularize /

" Generic Haskell delimiters:
"   <-  ->  (  )  {  }  =  ,
nmap <Leader>/h :Tabularize /\(<-\\|->\\|)\\|{\\|}\\|=\\|,\)<CR>
vmap <Leader>/h :Tabularize /\(<-\\|->\\|)\\|{\\|}\\|=\\|,\)<CR>


" ----------
" Haskell
" ----------

" Do not substitute characters, ever
let g:haskell_conceal_wide = 0
let g:haskell_conceal = 0
let g:haskell_conceal_enumerations = 0

" Module Sections
let s:width = 80

function! HaskellModuleSection(...)
    let name = 0 < a:0 ? a:1 : inputdialog("Section name: ")

    return  repeat('-', s:width) . "\n"
    \       . "--  " . name . "\n"
    \       . "\n"

endfunction

nmap <silent> --s "=HaskellModuleSection()<CR>gp

" Module Headers
let s:width = 80

function! HaskellModuleHeader(...)
    let name = 0 < a:0 ? a:1 : inputdialog("Module: ")
    let note = 1 < a:0 ? a:2 : inputdialog("Note: ")
    let description = 2 < a:0 ? a:3 : inputdialog("Describe this module: ")

    return  repeat('-', s:width) . "\n" 
    \       . "-- | \n" 
    \       . "-- Module      : " . name . "\n"
    \       . "-- Note        : " . note . "\n"
    \       . "-- \n"
    \       . "-- " . description . "\n"
    \       . "-- \n"
    \       . repeat('-', s:width) . "\n"
    \       . "\n"

endfunction

nmap <silent> --h "=HaskellModuleHeader()<CR>:0put =<CR>

"" [syntastic]
"map <silent> <Leader>e :Errors<CR>
"map <Leader>_ :SyntasticToggleMode<CR>
"" It's important to turn this off as ghc-mod annoyingly complains about
"" missing ghc-prim.
"let g:syntastic_auto_loc_list=0

"" [ghc-mod]
"map <silent> tu :call GHC_BrowseAll()<CR>
"map <silent> tw :call GHC_ShowType(1)<CR>

" [ghcmod-vim] Always lint on save
autocmd BufWritePost *.hs :GhcModLint

" Haddock documentation setup
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

" tagbar
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }

" Tagbar
nmap <leader>\ :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
