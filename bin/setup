#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function exit_erroneously {
  >&2 echo "ERROR: A child script has ended with a non-zero exit code."
  exit 254
}

trap exit_erroneously ERR
set -e

>&2 echo "----> Checking for Xcode command line tools..."
if [[ ! -d /Library/Developer/CommandLineTools ]]; then
  >&2 echo "----> Installing Xcode command line tools..."
  xcode-select --install
  >&2 echo "----> NOTE: Re-run setup after Xcode command line tools has been installed."
  exit 3
fi

>&2 echo "----> Installing Homebrew..."
curl https://raw.githubusercontent.com/Homebrew/install/master/install >/tmp/install_homebrew.rb
if [[ $? -ne 0 ]]; then
  >&2 echo "----> ERROR: Failed to download homebrew installer."
  exit 4
fi
echo | ruby /tmp/install_homebrew.rb

>&2 echo "----> Installing command-line programs with Homebrew..."
bin/install_program ag
bin/install_program binutils
bin/install_program cloc
bin/install_program coreutils
bin/install_program exiftool
bin/install_program ffmpeg
bin/install_program fish
bin/install_program git
bin/install_program git-lfs
bin/install_program git-when-merged
bin/install_program haskell-stack
bin/install_program jq
bin/install_program node
bin/install_program osquery
bin/install_program p7zip
bin/install_program parallel
bin/install_program postgresql
bin/install_program python
bin/install_program vim
bin/install_program woof
bin/install_program awscli
bin/install_program ncdu
bin/install_program sbcl
bin/install_program httrack
bin/install_program lastpass-cli
bin/install_program autossh
bin/install_program mplayer
bin/install_program docker

>&2 echo "----> Creating necessary directories..."
rm -rf ~/s
mkdir -p ~/.ssh
mkdir -p ~/.stack
mkdir -p ~/s
mkdir -p ~/Desktop/code
mkdir -p ~/Desktop/code/hack
mkdir -p ~/Desktop/keys

>&2 echo "----> Applying default files..."
cp ~/Desktop/config/etc/DS_Store ~/.DS_Store

>&2 echo "----> Creating symlinks..."
bin/create-link ~/.config  ~/Desktop/config
bin/create-link ~/.ackrc  ~/Desktop/config/dotfiles/ackrc
bin/create-link ~/.editorconfig  ~/Desktop/config/dotfiles/editorconfig
bin/create-link ~/.gitconfig  ~/Desktop/config/dotfiles/gitconfig
bin/create-link ~/.gitignore  ~/Desktop/config/dotfiles/gitignore
bin/create-link ~/.vimrc  ~/Desktop/config/dotfiles/vimrc

>&2 echo "----> Setting stack up..."
bin/create-link ~/.stack/config.yaml  ~/Desktop/config/dotfiles/stack
if [[ ! -d ~/Desktop/code/hack/stylish-haskell ]]; then
  git clone https://github.com/jaspervdj/stylish-haskell.git ~/Desktop/code/hack/stylish-haskell
  if [[ $? -ne 0 ]]; then
    >&2 echo "----> ERROR: Failed to download stylish-haskell."
    exit 5
  fi
fi
(
  cd ~/Desktop/code/hack/stylish-haskell;
  stack setup;
  stack install;
)

>&2 echo "----> Creating shortcut symlinks..."
bin/create-link-to-dir ~/s/c ~/Desktop/code
bin/create-link-to-dir ~/s/d ~/Desktop
bin/create-link-to-dir ~/s/h ~/Desktop/code/hack
bin/create-link-to-dir ~/s/k ~/Desktop/keys
bin/create-link-to-dir ~/s/t ~/Desktop/tools
bin/create-link-to-dir ~/s/m ~/Desktop/code/mhe
bin/create-link-to-dir ~/s/o ~/Movies
bin/create-link-to-dir ~/s/v /Volumes
bin/create-link-to-dir ~/s/w ~/Downloads

>&2 echo "----> Including old versions of casks..."
brew tap caskroom/versions

>&2 echo "----> Install Cask..."
brew tap caskroom/cask

>&2 echo "----> Installing desktop applications with Homebrew Cask..."
bin/install_application https://raw.githubusercontent.com/caskroom/homebrew-cask/19c3eff52dc8b7d8e36c40eb6538592ae0c720d8/Casks/archiver.rb
bin/install_application "0xed"
bin/install_application backblaze
bin/install_application backblaze-downloader
bin/install_application blockblock
bin/install_application diffmerge
bin/install_application dropbox
bin/install_application firefox
bin/install_application google-chrome
bin/install_application iterm2
bin/install_application java
bin/install_application knockknock
bin/install_application sequel-pro
bin/install_application skitch
bin/install_application slack
bin/install_application soundflower
bin/install_application spectacle
bin/install_application sublime-text
bin/install_application torbrowser
bin/install_application transmission
bin/install_application vagrant
bin/install_application virtualbox
bin/install_application vlc
bin/install_application cyberduck
bin/install_application whatsapp
bin/install_application veracrypt
bin/install_application osxfuse
bin/install_application skype
bin/install_application alarm-clock
bin/install_application dbeaver-community
bin/install_application kindle
bin/install_application valentina-studio

>&2 echo "----> Installing Python programs..."
pip2 install autopep8
if [[ $? -ne 0 ]]; then
  >&2 echo "----> ERROR: Failed to install autopep8."
  exit 6
fi

>&2 echo "----> Installing Node.js programs..."
npm install -g polymer-cli
npm install -g clausreinke/typescript-tools typescript
if [[ $? -ne 0 ]]; then
  >&2 echo "----> ERROR: Failed to install polymer-cli."
  exit 7
fi

>&2 echo "----> Copying fonts..."
rsync -avPz $DIR/../fonts/Input/* /Library/Fonts

>&2 echo "----> Setting fish as the default shell..."
sudo sh -c 'echo /usr/local/bin/fish >> /etc/shells'
chsh -s /usr/local/bin/fish

>&2 echo "----> keep-alive: update existing sudo time stamp until finish..."
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

>&2 echo "----> Installing SSH config file..."
ln -s "$(cd $DIR/..; pwd)/dotfiles/ssh_config" ~/.ssh/config

>&2 echo "----> Configuring OS..."
set -x
# Most scripts are addapted from
# https://github.com/mathiasbynens/dotfiles/blob/master/.osx
osx/app
osx/dock
osx/finder
osx/general
osx/git
osx/input
osx/mac
osx/neobundle
osx/no_itunes
osx/screen
osx/spotlight
osx/ssd
osx/ssh
osx/terminal
osx/webkit
set +x

>&2 echo "----> Mounting application images that need to be set up manually..."
find "/usr/local/Caskroom/blockblock/" -name "BlockBlock_Installer.app" | parallel open
find "/usr/local/Caskroom/backblaze/" -name "Backblaze Installer.app" | parallel open

>&2 echo "----> Done setting up."
exit 0
