#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function exit_erroneously {
  >&2 echo "ERROR: A child script has ended with a non-zero exit code."
  exit 254
}

trap exit_erroneously ERR
set -e

>&2 echo "----> Checking for Xcode command line tools..."
if [[ ! -d /Library/Developer/CommandLineTools ]]; then
  >&2 echo "----> Installing Xcode command line tools..."
  xcode-select --install
  >&2 echo "----> NOTE: Re-run setup after Xcode command line tools has been installed."
  exit 3
fi

>&2 echo "----> Installing Homebrew..."
curl https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh >/tmp/install_homebrew
if [[ $? -ne 0 ]]; then
  >&2 echo "----> ERROR: Failed to download homebrew installer."
  exit 4
fi
bash /tmp/install_homebrew
if [[ $? -ne 0 ]]; then
  >&2 echo "----> ERROR: Failed to install homebrew."
  exit 6
fi

>&2 echo "----> Including old versions of casks..."
brew tap homebrew/cask-versions

>&2 echo "----> Install Cask..."
brew tap homebrew/cask

>&2 echo "----> Adding additional taps..."
brew tap johanhaleby/kubetail

>&2 echo "----> Installing programs with Homebrew..."
bin/install-program java
bin/install-program ag
bin/install-program binutils
bin/install-program cloc
bin/install-program coreutils
bin/install-program fish
bin/install-program git
bin/install-program git-when-merged
bin/install-program haskell-stack
bin/install-program jq
bin/install-program node
bin/install-program p7zip
bin/install-program parallel
bin/install-program postgresql
bin/install-program python
bin/install-program vim
bin/install-program awscli
bin/install-program sbcl
bin/install-program wget
bin/install-program b2-tools
bin/install-program elm
bin/install-program python
bin/install-program kops
bin/install-program gnupg
bin/install-program kubetail
bin/install-program scw
bin/install-program tig
bin/install-program backblaze
bin/install-program backblaze-downloader
bin/install-program blockblock
bin/install-program diffmerge
bin/install-program dropbox
bin/install-program firefox
bin/install-program google-chrome
bin/install-program iterm2
bin/install-program knockknock
bin/install-program sequel-pro
bin/install-program slack
bin/install-program spectacle
bin/install-program sublime-text
bin/install-program vlc
bin/install-program cyberduck
bin/install-program whatsapp
bin/install-program osxfuse
bin/install-program veracrypt
bin/install-program skype
bin/install-program ngrok
bin/install-program android-platform-tools
bin/install-program docker
bin/install-program tableplus
bin/install-program racket
bin/install-program teensy
bin/install-program anaconda2
bin/install-program postman
bin/install-program postgres
bin/install-program spotify
bin/install-program balenaetcher
bin/install-program r
bin/install-program rstudio
bin/install-program handbrake
bin/install-program rust
bin/install-program discord
bin/install-program figma
bin/install-program timer
bin/install-program vanilla
bin/install-program openvpn-connect
bin/install-program elixir
bin/install-program tree

>&2 echo "----> Install fisher..."
curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
/usr/local/bin/fish bin/install-fisher-utilities

>&2 echo "----> Creating necessary directories..."
rm -rf ~/s
mkdir -p ~/.ssh
mkdir -p ~/.stack
mkdir -p ~/s
mkdir -p ~/Desktop/code
mkdir -p ~/Desktop/code/hack
mkdir -p ~/Desktop/keys
mkdir -p ~/bin

>&2 echo "----> Applying default files..."
cp ~/Desktop/config/etc/DS_Store ~/.DS_Store

>&2 echo "----> Creating symlinks..."
bin/create-link ~/.config  ~/Desktop/config/
bin/create-link ~/.ackrc  ~/Desktop/config/dotfiles/ackrc
bin/create-link ~/.editorconfig  ~/Desktop/config/dotfiles/editorconfig
bin/create-link ~/.gitconfig  ~/Desktop/config/dotfiles/gitconfig
bin/create-link ~/.gitignore  ~/Desktop/config/dotfiles/gitignore
bin/create-link ~/.vimrc  ~/Desktop/config/dotfiles/vimrc

>&2 echo "----> Setting stack up..."
bin/create-link ~/.stack/config.yaml ~/Desktop/config/dotfiles/stack
if [[ ! -d ~/Desktop/code/hack/stylish-haskell ]]; then
  git clone https://github.com/jaspervdj/stylish-haskell.git ~/Desktop/code/hack/stylish-haskell
  if [[ $? -ne 0 ]]; then
    >&2 echo "----> ERROR: Failed to download stylish-haskell."
    exit 5
  fi
fi
(
  cd ~/Desktop/code/hack/stylish-haskell;
  stack setup;
  stack install;
)

>&2 echo "----> Creating shortcut symlinks..."
bin/create-link-to-dir ~/s/c ~/Desktop/code
bin/create-link-to-dir ~/s/d ~/Desktop
bin/create-link-to-dir ~/s/h ~/Desktop/code/hack
bin/create-link-to-dir ~/s/v /Volumes
bin/create-link-to-dir ~/s/w ~/Downloads
bin/create-link-to-dir ~/s/a ~/Desktop/code/airfox
bin/create-link-to-dir ~/s/ad ~/Desktop/code/airfox/dev-env

>&2 echo "----> Installing utilities..."
>&2 echo "--------> Installing s-exp pretty printer"
(
  cd ~/s/h
  rm -rf prettyprint-s-expression
  git clone https://github.com/mattmight/prettyprint-s-expression
  cd prettyprint-s-expression
  make install
  cp ~/bin/prettyprint-sexp.rkt ~/bin/prettyprint-sexp
)

>&2 echo "----> Installing Node.js programs..."
bin/install-npm-bin polymer-cli
bin/install-npm-bin clausreinke/typescript-tools
bin/install-npm-bin typescript
bin/install-npm-bin ts-node
bin/install-npm-bin jay-repl

>&2 echo "----> Copying fonts..."
rsync -avPz $DIR/../fonts/Input/* /Library/Fonts
rsync -avPz $DIR/../fonts/JetBrains/* /Library/Fonts

>&2 echo "----> Setting fish as the default shell..."
sudo sh -c 'echo /usr/local/bin/fish >> /etc/shells'
chsh -s /usr/local/bin/fish

>&2 echo "----> keep-alive: update existing sudo time stamp until finish..."
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

>&2 echo "----> Installing SSH config file..."
rm -f ~/.ssh/config
ln -s "$(cd $DIR/..; pwd)/dotfiles/ssh_config" ~/.ssh/config

>&2 echo "----> Configuring OS..."
set -x
# Most scripts are adapted from
# https://github.com/mathiasbynens/dotfiles/blob/master/.osx
osx/app
osx/dock
osx/finder
osx/general
osx/git
osx/input
osx/mac
osx/neobundle
osx/no_itunes
osx/screen
osx/spotlight
osx/ssd
osx/ssh
osx/terminal
osx/webkit
set +x

>&2 echo "----> Mounting application images that need to be set up manually..."
find "/usr/local/Caskroom/blockblock/" -name "BlockBlock_Installer.app" | parallel open
find "/usr/local/Caskroom/backblaze/" -name "Backblaze Installer.app" | parallel open

>&2 echo "----> Done setting up."
exit 0
